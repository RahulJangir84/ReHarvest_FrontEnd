name: Deploying Frontend to Staging

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: reharvest
  EC2_USERNAME: ubuntu

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          build-args: |
            NEXT_PUBLIC_HOSTING_DOMAIN=${{ secrets.NEXT_PUBLIC_HOSTING_DOMAIN }}
            NEXT_PUBLIC_AUTH_URL=${{ secrets.NEXT_PUBLIC_AUTH_URL }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
          AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          RESEND_VERIFIED_DOMAIN: ${{ secrets.RESEND_VERIFIED_DOMAIN }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTH_TRUST_HOST: ${{ secrets.AUTH_TRUST_HOST }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          envs: DOCKER_IMAGE_NAME,DOCKER_HUB_USERNAME,AUTH_SECRET,AUTH_GOOGLE_ID,AUTH_GOOGLE_SECRET,AUTH_GITHUB_ID,AUTH_GITHUB_SECRET,RESEND_VERIFIED_DOMAIN,RESEND_API_KEY,NODE_ENV,DATABASE_URL
          script: |
            echo "Stopping existing container if running..."
            sudo docker stop $DOCKER_IMAGE_NAME || true
            sudo docker rm $DOCKER_IMAGE_NAME || true

            echo "Removing old Docker image..."
            sudo docker rmi $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest || true

            echo "Pulling latest Docker image..."
            sudo docker pull $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest

            echo "Starting new container..."
            sudo docker run -d --name $DOCKER_IMAGE_NAME -e AUTH_SECRET=$AUTH_SECRET -e AUTH_TRUST_HOST=$AUTH_TRUST_HOST -e AUTH_GOOGLE_ID=$AUTH_GOOGLE_ID -e AUTH_GOOGLE_SECRET=$AUTH_GOOGLE_SECRET -e AUTH_GITHUB_ID=$AUTH_GITHUB_ID -e AUTH_GITHUB_SECRET=$AUTH_GITHUB_SECRET -e RESEND_VERIFIED_DOMAIN=$RESEND_VERIFIED_DOMAIN -e RESEND_API_KEY=$RESEND_API_KEY -e NODE_ENV=$NODE_ENV -e DATABASE_URL=$DATABASE_URL -p 3000:3000 --restart unless-stopped $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest

            echo "Verifying deployment..."
            sudo docker ps

            echo "Deployment successful."